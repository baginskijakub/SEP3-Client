@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Text.Json
@using Domain.DTOs
@inject IRideService _rideService
@inject IReservationService _reservationService
@inject ILoginService _loginService
@inject IJSRuntime _JsRuntime

<div class="wrapper">
    @if (ride != null)
    {
        <div class="head">
                <StatusIndicator status="@status"/>
                <div class="head-inner">
                    <h3>@ride.StartLocation.City</h3>
                    <img src="icons/arrow.svg"/>
                    <h3>@ride.Destination.City</h3>
                </div>
                <p class="caption">@ride.StartDate.GetFormattedString() | @driverName</p>
            </div>
            
    }
    
            <div class="map-container">
                <div id="@rideId" class="map" ></div>
                @if (status.Equals("Accepted"))
                {
                    <TertiaryButton Text="Cancel" OnClickFunction="OnCancelReservation"/>
                }
                </div>
    
</div>

@code {
    [Parameter]
    public int rideId { get; set; }
    
    [Parameter]
    public Ride? ride { get; set; }
    
    
    [Parameter]
    public int reservationId { get; set; }

    [Parameter]
    public string status { get; set; }
    
    public string driverName { get; set; }

    private bool mapRendered = false;
    
    public RideMap RideMap { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        ride = await _rideService.GetRideById(rideId);
        var res = await _loginService.GetDriverByIdAsync(ride.DriverId);
        driverName = res.Name;
    }

    public async void OnCancelReservation()
    {
        
        bool result  = await _reservationService.ChangeReservationStatus(new ChangeStatusDto()
        {
            Id = reservationId,
            Status = "Cancelled by passenger"
        });
        if (result)
        {
            status = "Cancelled by passenger";
        }
        else
        {
            status = "Error, please try again";
        }
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!mapRendered && ride != null)
        {
            RideMap = new RideMap()
            {
                RideId = ride.Id.ToString(),
                StartLat = ride.StartLocation.CoordinatesX,
                StartLng = ride.StartLocation.CoordinatesY,
                EndLat = ride.Destination.CoordinatesX,
                EndLng = ride.Destination.CoordinatesY
            };
            await _JsRuntime.InvokeVoidAsync("initRideMap", JsonSerializer.Serialize(RideMap));
            mapRendered = true;
            StateHasChanged();
        }
    }

}