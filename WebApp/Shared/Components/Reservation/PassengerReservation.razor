@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Text.Json
@using Domain.DTOs
@inject IRideService _rideService
@inject IReservationService _reservationService
@inject IJSRuntime _JsRuntime

<div class="wrapper">
    <div class="head">
        <StatusIndicator status="Accepted"/>
        <div class="head-inner">
            <h3>@ride.StartLocation.City</h3>
            <img src="icons/arrow.svg"/>
            <h3>@ride.Destination.City</h3>
        </div>
        <p class="caption">@ride.StartDate.GetFormattedString() | @ride.DriverId</p>
    </div>
    <div class="map-container">
        <div id="@ride.Id.ToString()" class="map"/>
        <TertiaryButton Text="Cancel" OnClickFunction="OnCancelReservation"/>
    </div>
</div>

@code {
    [Parameter]
    public int rideId { get; set; }
    
    public Ride ride { get; set; }
    
    [Parameter]
    public int reservationId { get; set; }

    private string status { get; set; }
    
    public RideMap RideMap { get; set; }
    
    protected async override Task OnInitializedAsync()
    {
        ride = await _rideService.GetRideById(rideId);
    }

    public async void OnCancelReservation()
    {
        
        bool result  = await _reservationService.ChangeReservationStatus(new ChangeReservationStatusDto()
        {
            ReservationId = reservationId,
            Status = "Cancelled by passenger"
        });
        if (result)
        {
            status = "Cancelled by passenger";
        }
        else
        {
            status = "Error, please try again";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RideMap = new RideMap()
            {
                rideId = ride.Id.ToString(),
                startLat = ride.StartLocation.CoordinatesX,
                startLng = ride.StartLocation.CoordinatesY,
                endLat = ride.Destination.CoordinatesX,
                endLng = ride.Destination.CoordinatesY
            };
            await _JsRuntime.InvokeVoidAsync("initRideMap", JsonSerializer.Serialize(RideMap));
            StateHasChanged();
        }
    }

}