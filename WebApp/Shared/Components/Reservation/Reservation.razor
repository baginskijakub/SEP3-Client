@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@inject IRideService rideService
@inject IReservationService reservationService

<div class="reservation-wrapper">
    <div class="reservation-left">
        <h3>@passengerName</h3>
        <div class="ride-destination">
            <h5>@ride.StartLocation.City</h5>
            <img src="icons/arrow.svg"/>
            <h5>@ride.Destination.City</h5>
        </div>
        <p>@ride.StartDate.GetDateString()</p>
    </div>
    <div class="reservation-right">
        <img src="icons/map-placeholder.png">
        <div class="buttons-container">
            @if (didAccept == null)
            {
                <SecondaryButton Text="Reject"></SecondaryButton>
                <SecondaryButton Text="Accept"> </SecondaryButton>
            }
            else if(didAccept == true)
            {
                <SecondaryButton Text="Undo Accept"></SecondaryButton>
            }
            else
            {
                <SecondaryButton Text="Undo Reject"></SecondaryButton>
            }
        </div>
    </div>
</div>

@code 
{

    public Ride ride { get; set; }
    
    [Parameter]
    public String passengerName { get; set; }

    [Parameter]
    public bool? didAccept { get; set; }
    
    [Parameter] public int rideId { get; set; }
    
    [Parameter]
    public int reservationId { get; set; }

    
    protected override async Task OnInitializedAsync()
    {

        try
        {
            ride = await rideService.GetRideById(rideId);

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            
        }
    
    }
    
    private async void AcceptReservation()
    {
        try
        {
            reservationService.acceptPassenger(
                new AcceptReservationDto()
                {
                    ReservationId = reservationId,
                    didAccept = true
                });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void RejectReservation()
    {
        try
        {
            reservationService.acceptPassenger(
                new AcceptReservationDto()
                {
                    ReservationId = reservationId,
                    didAccept = false
                });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}