@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Text.Json
@using WebApp.Shared.Components.Buttons
@using WebApp.Shared.Components.Reservation

@using Domain.DTOs
@inject IReservationService reservationService
@inject IRideService rideService
@inject IJSRuntime JsRuntime

<div class="ride-wrapper">
    <div class="ride-inner">
        <div class="ride-head">
            <p>@Ride.StartDate.GetFormattedString()</p>
            <div class="ride-head-inner">
                <h3>@Ride.StartLocation.City</h3>
                <img src="icons/arrow.svg"/>
                <h3>@Ride.Destination.City</h3>
            </div>
            <div class="ride-driver">
                <img src="icons/user.svg"/>
                <p>@DriverName</p>
            </div>
        </div>
        <div id="@Ride.Id.ToString()" class="map"></div>
        <div class="buttons-container">
            @if (Ride.Status == "Cancelled")
            {
                <StatusIndicator status="Cancelled"/>
            }
            else
            {
                <TertiaryButton Text="Cancel" OnClickFunction="CancelRide" Size="Small"></TertiaryButton>
            }
            <button class="expand-button" onclick="@OnButtonClick">
                <img src="icons/arrow.svg"/>
            </button>
        </div>
    </div>
    @if (state == "open")
    {
        <div class="ride-passengers-wrapper">
            <h4>Accepted passengers</h4>
            <div class="ride-passengers-container">
                @foreach (var reservation in reservations)
                {
                    <div class="passanger-container">
                        <img src="icons/user.svg"/>
                        <p>@reservation.PassengerName</p>
                    </div>
                }

            </div>
        </div>
    }
</div>



@code {
    [Parameter]
    public Domain.Models.Ride Ride { get; set; }
    
    [Parameter]
    public string DriverName { get; set; }

    public List<Domain.Models.Reservation> reservations;
    
    public RideMap RideMap { get; set; }
    
    
    
    public string state { get; set; }

    protected override async Task OnInitializedAsync()
    {
        reservations = await reservationService.GetAcceptedReservationsByRideId(Ride.Id);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RideMap = new RideMap()
            {
                RideId = Ride.Id.ToString(),
                StartLat = Ride.StartLocation.CoordinatesX,
                StartLng = Ride.StartLocation.CoordinatesY,
                EndLat = Ride.Destination.CoordinatesX,
                EndLng = Ride.Destination.CoordinatesY
            };
            await JsRuntime.InvokeVoidAsync("initRideMap", JsonSerializer.Serialize(RideMap));
            StateHasChanged();
        }
    }

    public async void CancelRide()
    {
        ChangeStatusDto dto = new ChangeStatusDto()
        {
            Id = Ride.Id,
            Status = "Cancelled"
        };
        await rideService.ChangeRideStatus(dto);
        Ride.Status = "Cancelled";
        StateHasChanged();

    }

    public void OnButtonClick()
    {
        if (state == "open")
        {
            state = "closed";
        }
        else
        {
            state = "open";
        }
        StateHasChanged();
    }
    
    
}