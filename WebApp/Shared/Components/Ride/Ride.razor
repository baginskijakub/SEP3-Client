@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager navigationManager
@inject ILoginService loginService;


<div class="ride-wrapper">
    <div class="ride-inner">
        <p class="caption">@Time</p>
        <div class="ride-destination">
            <h5>@StartLocation</h5>
            <img src="icons/arrow.svg"/>
            <h5>@EndLocation</h5>
        </div>
        @if (Driver != null)
        {
                    <p class="caption">@Driver.Name</p>
        }
    </div>
    <img class="" src="icons/map-placeholder.png"/>
    @if (Detailed)
    {
        <button class="select-ride-button" @onclick="InvokeOnClick"><img src="icons/arrow.svg" alt="arrow"/></button>
    }
</div>

@code {
    [Parameter]
    public string StartLocation { get; set; } = "Start";
    
    [Parameter]
    public string EndLocation { get; set; } = "End";
    
    [Parameter]
    public string Time { get; set; } = "Time";
    
    [Parameter]
    public int DriverId { get; set; }
    
    [Parameter]
    public int RideId { get; set; }

    [Parameter]
    public bool Detailed { get; set; } = true;
    
    public Driver? Driver { get; set; }
    
    public void InvokeOnClick()
    {
        navigationManager.NavigateTo($"/RideDetails/{RideId}");
    }

    protected override async Task OnInitializedAsync()
    {
        Driver = await loginService.GetDriverByIdAsync(DriverId);    
    }



}