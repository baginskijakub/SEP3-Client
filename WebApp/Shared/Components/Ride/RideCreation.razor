@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@using WebApp.Pages
@using DateTime = System.DateTime
@using System.Security.Claims
@inject IRideService rideService;
@inject NavigationManager navigationManager;

<div class="rideCreation-wrapper">
    <p class="rideCreation-title">@State</p>
    <div class="form-button-wrapper">
        <div class="form-wrapper">
            @switch (State)
            {
                case "Ride information":
                    <div class="input-wrapper">
                        <label class="input-label" for="date">Date</label>
                        <input class="input" id="date" type="text" placeholder="01/12/2022" @bind="date"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="time">Time</label>
                        <input class="input" id="time" type="text" placeholder="17:45" @bind="time"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="capacity">Capacity</label>
                        <input class="input" id="capacity" type="text" placeholder="Insert capacity of the car" @bind="capacity"/>
                    </div>
                    break;
                case "Start location":
                    <div class="input-wrapper">
                        <label class="input-label" for="country">Country</label>
                        <input class="input" id="country" type="text" placeholder="Insert country" @bind="startCountry"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="city">City</label>
                        <input class="input" id="city" type="text" placeholder="Insert city" @bind="startCity"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="street">Street</label>
                        <input class="input" id="street" type="text" placeholder="Insert street" @bind="startStreet"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="zip">Zip code</label>
                        <input class="input" id="zip" type="text" placeholder="Insert zip code" @bind="startZip"/>
                    </div>
                    break;
                case "Destination":
                    <div class="input-wrapper">
                        <label class="input-label" for="country">Country</label>
                        <input class="input" id="country" type="text" placeholder="Insert country" @bind="destinationCountry"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="city">City</label>
                        <input class="input" id="city" type="text" placeholder="Insert city" @bind="destinationCity"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="street">Street</label>
                        <input class="input" id="street" type="text" placeholder="Insert street" @bind="destinationStreet"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="zip">Zip code</label>
                        <input class="input" id="zip" type="text" placeholder="Insert zip code" @bind="destinationZip"/>
                    </div>
                    break;
            }
            

        </div>
        @if (State == "Destination")
        {
            <SecondaryButton Text="Create" OnClickFunction="@ChangeState"></SecondaryButton>
        }
        else
        {
            <SecondaryButton Text="Continue" OnClickFunction="@ChangeState"></SecondaryButton>
        }
    </div>
    
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    
    [Parameter] 
    public string State { get; set; }

    private bool isLoggedIn;
    private IEnumerable<Claim>? userClaims;

    private string driverId;
    private string? date;
    private string? time;
    private string? capacity;
    
    private string? startCountry;
    private string? startCity;
    private string? startStreet;
    private string? startZip;
    
    private string? destinationCountry;
    private string? destinationCity;
    private string? destinationStreet;
    private string? destinationZip;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        var enumerable = userClaims as Claim[] ?? userClaims.ToArray();
        driverId = enumerable.First(claim => claim.Type.Equals("Id")).Value;    
    }

    private void Reset(string state)
    {
        switch (state)
        {
            case "Ride information":
                date = null;
                time = null;
                capacity = null;
                break;
            case "Start location":
                startCity = null;
                startCountry = null;
                startStreet = null;
                startZip = null;
                break;
            case "Destination":
                destinationCity = null;
                destinationCountry = null;
                destinationStreet = null;
                destinationZip = null;
                break;
        }
    }

    private async Task ChangeState()
    {
        try
        {
            switch (State)
                    {
                        case "Ride information":
                            if (String.IsNullOrEmpty(date) || String.IsNullOrEmpty(time) || Int32.Parse(capacity) <= 0)
                            {
                                Reset(State);
                                throw new Exception("Fill correctly form");
                            }
                            string[] dateArr = date.Split('/');
                            if (dateArr.Length != 3)
                            {
                                Reset(State);

                                throw new Exception("Incorrect date");

                            }

                            string[] timeArr = time.Split(':');

                            if (timeArr.Length != 2)
                            {
                                Reset(State);

                                throw new Exception("Incorrect time");

                            }
                            
                            DateTime today = DateTime.Now;
                            DateTime userDate = new DateTime(Int32.Parse(dateArr[2]), Int32.Parse(dateArr[1]),Int32.Parse(dateArr[0]),
                                Int32.Parse(timeArr[0]),Int32.Parse(timeArr[1]),0  );
                            if (DateTime.Compare(userDate, today) <= 0)
                            {

                                Reset(State);
                                throw new Exception("Incorrect date and time");

                            }
                            State = "Start location";
                            break;
                        case "Start location":
                            if (String.IsNullOrEmpty(startCity) || String.IsNullOrEmpty(startCountry) ||
                                String.IsNullOrEmpty(startStreet) || String.IsNullOrEmpty(startZip))
                            {
                                Reset(State);

                                throw new Exception("Fill correctly form");
                            }
                            State = "Destination";
                            break;
                        case "Destination":
                            if (String.IsNullOrEmpty(destinationCity) || String.IsNullOrEmpty(destinationCountry) ||
                                String.IsNullOrEmpty(destinationStreet) || String.IsNullOrEmpty(destinationZip))
                            {
                                Reset(State);

                                throw new Exception("Fill correctly form");
                            }
                            Location startLocation = new Location()
                            {
                                City = startCity, CoordinatesX = 22,
                                CoordinatesY = 33, Country = startCountry, StreetName = startStreet, ZipCode =startZip
                            };
                            Location destination = new Location()
                            {
                                City = destinationCity, CoordinatesX = 22,
                                CoordinatesY = 33, Country = destinationCountry, StreetName = destinationStreet, ZipCode = destinationZip
                            };
                            RideCreationDto dto = new RideCreationDto()
                            {
                                Capacity = Int32.Parse(capacity), Date = date
                                , StartLocation = startLocation, Destination =destination, DriverId = Int32.Parse(driverId), Time = time
                            };
                            Console.WriteLine(dto.StartLocation.ZipCode);
                            Domain.Models.Ride ride = await rideService.CreateRide(dto);
                             navigationManager.NavigateTo($"/CreateRide/{ride.Id}");
                            break;
                    }
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            StateHasChanged();
        }
        
    }

    

}