@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@using WebApp.Pages
@using DateTime = System.DateTime
@using System.Security.Claims
@inject IRideService rideService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JsRuntime

<div class="rideCreation-wrapper">
    <p class="rideCreation-title">@State</p>
    <div class="form-button-wrapper">
        <div class="form-wrapper">
            <h3 id="AddressLine" class="address-label">@AddressLine</h3>
            <div id="map"  @onclick="() => StateHasChanged()"></div>
            @switch (State)
            {
                case "Ride information":
                    <div class="input-wrapper">
                        <label class="input-label" for="date">Date</label>
                        <input class="input" id="date" type="text" placeholder="01/12/2022" @bind="date"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="time">Time</label>
                        <input class="input" id="time" type="text" placeholder="17:45" @bind="time"/>
                    </div>
                    <div class="input-wrapper">
                        <label class="input-label" for="capacity">Capacity</label>
                        <input class="input" id="capacity" type="text" placeholder="Insert capacity of the car" @bind="capacity"/>
                    </div>
                    <p class="error-label">@errorLabel</p>
                    break;
                case "Start location":
                    break;
                case "Destination":
                    break;
            }


        </div>
        @if (State == "Destination")
        {
            <SecondaryButton Text="Create" OnClickFunction="@ChangeState"></SecondaryButton>
        }
        else
        {
            <SecondaryButton Text="Continue" OnClickFunction="@ChangeState"></SecondaryButton>
        }
    </div>
    
</div>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    public static string State { get; set; } = "Ride information";
    public string errorLabel { get; set; } = "";
    private bool isLoggedIn;
    private IEnumerable<Claim>? userClaims;

    private string driverId;
    private string? date;
    private string? time;
    private string? capacity;
    
    private static string? startCountry { get; set; }
    private static string? startCity { get; set; }
    private static string? startStreet { get; set; }
    private static string? startZip { get; set; }

    public static double startLat { get; set; }
    public static double startLng { get; set; }
    
    public static double destinationLat { get; set; }
    public static double destinationLng { get; set; }
    
    private static string? destinationCountry{ get; set; }
    private static string? destinationCity{ get; set; }
    private static string? destinationStreet{ get; set; }
    private static string? destinationZip{ get; set; }
    
    public static string AddressLine { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        var enumerable = userClaims as Claim[] ?? userClaims.ToArray();
        driverId = enumerable.First(claim => claim.Type.Equals("Id")).Value;
        State = "Ride information";
        AddressLine = "";

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initialize");
            await JsRuntime.InvokeVoidAsync("toggleMap", false);
        }
    }

    [JSInvokable]
    public static void setCoordinates(double lat, double lng)
    {
        if (State == "Start location")
        {
            startLat = lat;
            startLng = lng;
        }
        if (State == "Destination")
        {
            destinationLat = lat;
            destinationLng = lng;
        }
    }
    
    [JSInvokable]
    public static void setAddressLine(string address)
    {
        AddressLine = address;
        Console.WriteLine(AddressLine);
        
    }

    [JSInvokable]
    public static void setLocation(string country, string city, string street, 
        string zip, double coordinatesX, double coordinatesY)
    {

        if (State == "Start location")
        {
            startCountry = country;
            startCity = city;
            startStreet = street;
            startZip = zip;
            startLat = coordinatesX;
            startLng = coordinatesY;
        }
        if (State == "Destination")
        {
            destinationCountry = country;
            destinationCity = city;
            destinationStreet = street;
            destinationZip = zip;
            destinationLat = coordinatesX;
            destinationLng = coordinatesY;
            Console.WriteLine(street);
        }
    }

    private void Reset(string state)
    {
        switch (state)
        {
            case "Ride information":
                date = null;
                time = null;
                capacity = null;
                break;
            case "Start location":
                startCity = null;
                startCountry = null;
                startStreet = null;
                startZip = null;
                break;
            case "Destination":
                destinationCity = null;
                destinationCountry = null;
                destinationStreet = null;
                destinationZip = null;
                break;
        }
    }

    private async Task ChangeState()
    {
        try
        {
            switch (State)
                    {
                        case "Ride information":
                            if (String.IsNullOrEmpty(date) || String.IsNullOrEmpty(time) || Int32.Parse(capacity) <= 0)
                            {
                                // Reset(State);
                                errorLabel = "Please fill every input field";
                                throw new Exception("Fill correctly form");
                            }
                            string[] dateArr = date.Split('/');
                            if (dateArr.Length != 3)
                            {
                                //Reset(State);
                                errorLabel = "Incorrect date";
                                throw new Exception("Incorrect date");

                            }

                            string[] timeArr = time.Split(':');

                            if (timeArr.Length != 2)
                            {
                                //Reset(State);
                                errorLabel = "Incorrect time";
                                throw new Exception("Incorrect time");

                            }
                            
                            DateTime today = DateTime.Now;
                            DateTime userDate = new DateTime(Int32.Parse(dateArr[2]), Int32.Parse(dateArr[1]),Int32.Parse(dateArr[0]),
                                Int32.Parse(timeArr[0]),Int32.Parse(timeArr[1]),0  );
                            if (DateTime.Compare(userDate, today) <= 0)
                            {

                                //Reset(State);
                                errorLabel = "Incorrect date and time";
                                throw new Exception("Incorrect date and time");

                            }
                            State = "Start location";
                            await JsRuntime.InvokeVoidAsync("toggleMap", true);
                            break;
                        case "Start location":
                            Console.WriteLine(startCountry + startCity + startStreet + startZip);
                            if (String.IsNullOrEmpty(startCity) || String.IsNullOrEmpty(startCountry) ||
                                String.IsNullOrEmpty(startStreet) || String.IsNullOrEmpty(startZip))
                            {
                                //Reset(State);

                                throw new Exception("Fill correctly form");
                            }
                            State = "Destination";
                            await JsRuntime.InvokeVoidAsync("clearAddress");
                            break;
                        case "Destination":
                            if (String.IsNullOrEmpty(destinationCity) || String.IsNullOrEmpty(destinationCountry) ||
                                String.IsNullOrEmpty(destinationStreet) || String.IsNullOrEmpty(destinationZip))
                            {
                                //Reset(State);

                                throw new Exception("Fill correctly form");
                            }
                            Location startLocation = new Location()
                            {
                                City = startCity, CoordinatesX = (long) startLat,
                                CoordinatesY = (long) startLng, Country = startCountry, StreetName = startStreet, ZipCode =startZip
                            };
                            Location destination = new Location()
                            {
                                City = destinationCity, CoordinatesX = (long) destinationLat,
                                CoordinatesY = (long) destinationLng, Country = destinationCountry, StreetName = destinationStreet, ZipCode = destinationZip
                            };
                            RideCreationDto dto = new RideCreationDto()
                            {
                                Capacity = Int32.Parse(capacity), Date = date
                                , StartLocation = startLocation, Destination =destination, DriverId = Int32.Parse(driverId), Time = time
                            };
                            Console.WriteLine(driverId);
                            Domain.Models.Ride ride = await rideService.CreateRide(dto);
                            State = "Ride information";
                             navigationManager.NavigateTo($"/CreateRide/{ride.Id}");
                            break;
                    }
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            StateHasChanged();
        }
        
    }
}