@page "/RideDetails/{rideId:int}"
@using WebApp.Shared.Components

@inject NavigationManager navigationManager
//not sure if ^ works

@using WebApp.Shared.Components.Ride
@using WebApp.Shared.Components.Buttons
@using HttpClients.ClientInterfaces
@using Ride = Domain.Models.Ride
@inject IRideService rideService

<div class="find-rides-page-wrapper">
    <div class="home-page-titles">
        <div class="primary-titles">
            <h1 class="title-primary">Are you sure</h1>
            <h1 class="title-primary">that you want to procced?</h1>
        </div>
        <h5 class="title-secondary">Please make sure that details of the ride work for you.</h5>
    </div>
    <div>
        @if (ride != null)
        {
            <RideDetailed Time="@ride.StartDate.GetDateString()" Driver="@ride.Driver" RideId="@ride.Id" StartLocation="@ride.StartLocation.City" EndLocation="@ride.Destination.City"></RideDetailed>
        }
    </div>
    <div class="outro-container">
        <h3>Everything all right?</h3>
        <div class="buttons-container">
            <TeritaryButton Text="Back to rides" hasArrow="true" arrowSide="Left" OnClickFunction="@InvokeOnClickBack"></TeritaryButton>
            <SecondaryButton Text="Proceed" hasArrow="true" arrowSide="Right" OnClickFunction="@InvokeOnClick"></SecondaryButton>
        </div>
    </div>
</div>
@code {

    [Parameter]
    public int RideId { get; set; }

    public Ride? ride { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
        ride = await rideService.GetRideById(RideId);

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    public void InvokeOnClick()
    {
        navigationManager.NavigateTo($"/RideCompletion/{RideId}");
    }
    
    public void InvokeOnClickBack()
    {
        navigationManager.NavigateTo($"/FindRides");
    }

}