@page "/ManageRides"
@using WebApp.Shared.Components.Ride
@using HttpClients.ClientInterfaces
@inject IRideService rideService
@using System.Security.Claims
@using Domain.Models
@using Ride = Domain.Models.Ride
 @* @attribute [Authorize]  *@

<div class="page-wrapper">
    <h1>Your rides</h1>
        <div class="rides-container">
            @foreach (var ride in rides)
            {
                <RideManager Ride="ride" DriverName="@userName"/> 
            }
        </div>
</div>


@code {
    
    public List<Domain.Models.Ride> rides { get; set; }
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private int driverId;
    public string userName;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        var enumerable = userClaims as Claim[] ?? userClaims.ToArray();
        
        //to check
        driverId = Int32.Parse(enumerable.First(claim => claim.Type.Equals("Id")).Value);
        userName = enumerable.First(claim => claim.Type.Equals("Name")).Value;
    
        rides = await rideService.GetRidesByDriverId(driverId);
    }

}